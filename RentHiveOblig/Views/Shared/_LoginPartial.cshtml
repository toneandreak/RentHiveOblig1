@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
        //Inspired from: https://stackoverflow.com/questions/2111748/how-can-i-tell-what-page-i-am-on-in-a-asp-net-mvc-application to see which page/controller user is in. 
        string currentController = null;

        if (ViewContext.RouteData.Values.ContainsKey("controller"))
        {
            currentController = ViewContext.RouteData.Values["controller"].ToString();
        }

        if (currentController == null || !currentController.Equals("Hosting"))
        {
            <li class="nav-item">
                <a class="nav-link text-dark" asp-controller="Hosting" asp-action="index" title="Hosting">Switch to Host</a>
            </li>
        }


    <li class="nav-item">
        <a  class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Profile</a>
    </li>
    <li class="nav-item">
        <form  class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
